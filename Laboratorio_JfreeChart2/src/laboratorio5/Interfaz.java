package laboratorio5;

import java.awt.*;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JFileChooser;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.general.DefaultPieDataset;

public class Interfaz extends JFrame {

    private boolean tablaCreada; // con esta variable sabemos si la tabla de notas ya fue creada
    private boolean promedios;
    private Integer nEstudiantes;
    private Integer nNotas;
    private ArrayList<Estudiante> estudiantes;
    private Materia materia;

    public Interfaz() {
        initComponents();

        this.nEstudiantes = 0;
        this.nNotas = 0;
        this.tablaCreada = false;
        this.estudiantes = new ArrayList<Estudiante>();
        this.promedios = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelMain = new javax.swing.JLabel();
        labelEstudiantes = new javax.swing.JLabel();
        nEstudiantesField = new javax.swing.JTextField();
        labelNotas = new javax.swing.JLabel();
        nNotasEstudiante = new javax.swing.JTextField();
        btnCrearTabla = new javax.swing.JButton();
        scrollTablaEstudiantes = new javax.swing.JScrollPane();
        btnCalcularPromedio = new javax.swing.JButton();
        resultadosLabel = new javax.swing.JLabel();
        resultadosPane = new javax.swing.JScrollPane();
        resultadosTable = new javax.swing.JTable();
        labelHistorico = new javax.swing.JLabel();
        historicoField = new javax.swing.JTextField();
        btnHistorico = new javax.swing.JButton();
        panelHistorico = new javax.swing.JPanel();
        panelMortalidad = new javax.swing.JPanel();
        resultadosLabel1 = new javax.swing.JLabel();
        reproboLabel = new javax.swing.JLabel();
        aproboLabel = new javax.swing.JLabel();
        cargarBtn = new javax.swing.JButton();
        exportarBtn = new javax.swing.JButton();
        labelNombreArchivo = new javax.swing.JLabel();
        nombreArchivoField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelMain.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelMain.setForeground(new java.awt.Color(255, 0, 0));
        labelMain.setText("Calculas las notas de tus alumnos");

        labelEstudiantes.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        labelEstudiantes.setForeground(new java.awt.Color(255, 0, 0));
        labelEstudiantes.setText("Cantidad de estudiantes");

        labelNotas.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        labelNotas.setForeground(new java.awt.Color(255, 0, 0));
        labelNotas.setText("Cantidad de notas por estudiante");

        btnCrearTabla.setText("Crear Tabla");
        btnCrearTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCrearTablaMouseClicked(evt);
            }
        });

        btnCalcularPromedio.setText("Calcular finales");
        btnCalcularPromedio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCalcularPromedioMouseClicked(evt);
            }
        });

        resultadosLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        resultadosLabel.setForeground(new java.awt.Color(255, 0, 0));
        resultadosLabel.setText("Resultados");

        resultadosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombres", "Definitiva", "Resultado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultadosPane.setViewportView(resultadosTable);

        labelHistorico.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelHistorico.setForeground(new java.awt.Color(255, 0, 0));
        labelHistorico.setText("Histórico Estudiantes");

        btnHistorico.setText("Mostrar histórico");
        btnHistorico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHistoricoMouseClicked(evt);
            }
        });

        panelHistorico.setMinimumSize(new java.awt.Dimension(250, 250));
        panelHistorico.setPreferredSize(new java.awt.Dimension(368, 368));

        javax.swing.GroupLayout panelHistoricoLayout = new javax.swing.GroupLayout(panelHistorico);
        panelHistorico.setLayout(panelHistoricoLayout);
        panelHistoricoLayout.setHorizontalGroup(
            panelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );
        panelHistoricoLayout.setVerticalGroup(
            panelHistoricoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelMortalidad.setPreferredSize(new java.awt.Dimension(242, 154));

        javax.swing.GroupLayout panelMortalidadLayout = new javax.swing.GroupLayout(panelMortalidad);
        panelMortalidad.setLayout(panelMortalidadLayout);
        panelMortalidadLayout.setHorizontalGroup(
            panelMortalidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 287, Short.MAX_VALUE)
        );
        panelMortalidadLayout.setVerticalGroup(
            panelMortalidadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        resultadosLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        resultadosLabel1.setForeground(new java.awt.Color(255, 0, 0));
        resultadosLabel1.setText("Mortalidad materia");

        reproboLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        reproboLabel.setForeground(new java.awt.Color(255, 0, 0));
        reproboLabel.setText("Reprobados:");

        aproboLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        aproboLabel.setForeground(new java.awt.Color(255, 0, 0));
        aproboLabel.setText("Aprobados:");

        cargarBtn.setText("Cargar CSV");
        cargarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cargarBtnMouseClicked(evt);
            }
        });

        exportarBtn.setText("Exportar CSV");
        exportarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportarBtnMouseClicked(evt);
            }
        });

        labelNombreArchivo.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        labelNombreArchivo.setForeground(new java.awt.Color(255, 0, 0));
        labelNombreArchivo.setText("Nombre del archivo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(scrollTablaEstudiantes)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelNotas)
                                    .addGap(18, 18, 18)
                                    .addComponent(nNotasEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelEstudiantes)
                                    .addGap(18, 18, 18)
                                    .addComponent(nEstudiantesField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(labelMain, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(exportarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cargarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(labelNombreArchivo, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnCrearTabla)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCalcularPromedio)
                            .addGap(120, 120, 120)
                            .addComponent(nombreArchivoField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(labelHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(historicoField, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHistorico))
                    .addComponent(panelHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelMortalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aproboLabel)
                            .addComponent(reproboLabel)))
                    .addComponent(resultadosLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(resultadosPane)
                        .addComponent(resultadosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(labelMain, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nEstudiantesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelEstudiantes, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNotas)
                            .addComponent(nNotasEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(cargarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(labelNombreArchivo)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nombreArchivoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCrearTabla)
                            .addComponent(btnCalcularPromedio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(scrollTablaEstudiantes, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(historicoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHistorico))
                .addGap(12, 12, 12)
                .addComponent(panelHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 234, Short.MAX_VALUE)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(resultadosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultadosPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultadosLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aproboLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reproboLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE))
                    .addComponent(panelMortalidad, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearTablaMouseClicked
        // Verificar que la tabla no esté creada
        if (tablaCreada == true) {
            JOptionPane.showMessageDialog(new JFrame(), "La tabla ya ha sido creada", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Leer los datos
        try {
            // Obtener el numero de estudiantes y convertirlo en entero
            nEstudiantes = Integer.parseInt(nEstudiantesField.getText());
            // Obtener el numero de notas y convertirlo en entero
            nNotas = Integer.parseInt(nNotasEstudiante.getText());
        } catch (NumberFormatException error) {
            // En caso de que el usuario haya puesto algo diferente a un numero
            JOptionPane.showMessageDialog(new JFrame(), "El numero de estudiantes o las notas no son correctas!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar que los datos no sean 0
        if (nEstudiantes <= 0 || nNotas <= 0) {
            // En caso de que el usuario haya puesto algo diferente a un numero
            JOptionPane.showMessageDialog(new JFrame(), "El numero de estudiantes o las notas no son correctas!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Construir la tabla
        // Crear un arreglo con los nombres de las columnas
        ArrayList<String> columnas = new ArrayList<String>();
        columnas.add("Nombres"); // Colocar el campo nombre
        // Se crear columnas que se llamen "Nota 1", "Nota 2", etc.
        for (int i = 0; i < nNotas; i++) {
            Integer valor = i + 1;
            columnas.add("Nota " + valor.toString());
        }

        // Se crea una tabla vacía con el número de elementos especificados por el usuario
        DefaultTableModel tablaVacia = new DefaultTableModel(nEstudiantes, columnas.size());
        tablaVacia.setColumnIdentifiers(columnas.toArray()); // Colocar el nombre de las columnas
        tablaNotas = new JTable(tablaVacia);
        // Se coloca dentro de la interfaz
        scrollTablaEstudiantes.getViewport().add(tablaNotas);

        // La tabla ya fue creada entonces cambiar la variable
        tablaCreada = true;
    }//GEN-LAST:event_btnCrearTablaMouseClicked

    private void btnCalcularPromedioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalcularPromedioMouseClicked
        // Verificar si la tabla con los estudiantes ya fue creada
        // Si no ha sido creada debe mostrarse un error
        if (tablaCreada == false) {
            // Mostrar un mensaje de error que le indique al usuario
            JOptionPane.showMessageDialog(new JFrame(), "Primero se tiene que crear la tabla de notas", "Error", JOptionPane.ERROR_MESSAGE);
            return; // salirse
        }

        // Obtener todos los valores de la tabla
        // Crear las notas finales
        ArrayList<Finales> notasFinales = new ArrayList<Finales>();

        // Crear una lista temporal para guardar estudiantes
        ArrayList<Estudiante> estudiantesTemp = new ArrayList<Estudiante>();

        // Por cada fila de la tabla
        for (int i = 0; i < nEstudiantes; i++) {
            String nombre = "Estudiante";
            ArrayList<Double> notas = new ArrayList<Double>();
            // Por cada columa de la tabla
            for (int j = 0; j < nNotas + 1; j++) { // Es nNotas + 1 porque se le suma la columna de nombre
                try {
                    if (j == 0) { // La primera columna es el nombre
                        nombre = tablaNotas.getValueAt(i, j).toString();
                    } else {
                        String valor = tablaNotas.getValueAt(i, j).toString();
                        notas.add(Double.parseDouble(valor));
                    }
                    // En caso de que haya un error
                } catch (NumberFormatException error) {
                    JOptionPane.showMessageDialog(new JFrame(), "Las notas son incorrectas, revise que las notas estén escritas con punto decimal (.) y el campo de nombre no esté vacío", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // salirse
                }
            }

            // Crear el estudiante y meter las notas
            Estudiante estudiante = new Estudiante(nombre, notas);
            // Meter nuevo estudiante
            estudiantesTemp.add(estudiante);
            // Calcular notas estudiante
            notasFinales.add(new Finales(estudiante));
        }

        // Guardar los nuevos estudiantes
        this.estudiantes = estudiantesTemp;

        // Borrar los anteriores contenidos de la tabla
        DefaultTableModel modelo = (DefaultTableModel) resultadosTable.getModel();
        modelo.setRowCount(0);
        // Por cada nota final calculada
        for (int i = 0; i < notasFinales.size(); i++) {
            // Obtenemos los datos
            String nombre = notasFinales.get(i).getNombreEstudiante();
            Double nota = notasFinales.get(i).getDefinitiva();
            String resultado = notasFinales.get(i).getResultado();
            // Se insertan en la tabla
            modelo.addRow(new Object[]{nombre, nota, resultado});
        }

        // Actualizar el listado de la materia
        this.materia = new Materia(this.estudiantes);

        // Formato de los decimales
        DecimalFormat formato = new DecimalFormat("##.###");
        // Actualizar los labels
        this.aproboLabel.setText("Aprobados: " + formato.format(materia.getAprobaron()) + '%');
        this.reproboLabel.setText("Reprobados: " + formato.format(materia.getReprobaron()) + '%');

        // Crear los datos del piechart
        DefaultPieDataset dataSet = new DefaultPieDataset();
        dataSet.setValue("Aprobaron", materia.getAprobaron());
        dataSet.setValue("Reprobaron", materia.getReprobaron());

        // Añadir la grafica a la interfaz
        JFreeChart pieChart = ChartFactory.createPieChart3D("Mortalidad asignatura", dataSet, true, true, false);
        panelMortalidad.setLayout(new BorderLayout());
        panelMortalidad.removeAll();
        panelMortalidad.add(new ChartPanel(pieChart), BorderLayout.CENTER);
        panelMortalidad.revalidate();
        panelMortalidad.repaint();

        promedios = true;
    }//GEN-LAST:event_btnCalcularPromedioMouseClicked

    private void btnHistoricoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHistoricoMouseClicked
        // Verificar si la tabla con los estudiantes ya fue creada
        // Si no ha sido creada debe mostrarse un error
        if (tablaCreada == false) {
            // Mostrar un mensaje de error que le indique al usuario
            JOptionPane.showMessageDialog(new JFrame(), "Primero se tiene que crear la tabla de notas", "Error", JOptionPane.ERROR_MESSAGE);
            return; // salirse
        }

        // Obtener el nombre a buscar
        String nombreBuscar = historicoField.getText();

        // Buscar el estudiante
        Estudiante buscado = null;
        for (int i = 0; i < estudiantes.size(); i++) {
            // Si el nombre del estudiante concuerda con el que se está buscando
            if (estudiantes.get(i).getNombre().equals(nombreBuscar)) {
                buscado = estudiantes.get(i);
            }
        }

        // Si el estudiante no se encontró
        if (buscado == null) {
            // Mostrar un mensaje de error que le indique al usuario
            JOptionPane.showMessageDialog(new JFrame(), "El estudiante no se pudo encontrar!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // salirse
        }

        // Obtener las notas
        ArrayList<Double> notasEstudiante = buscado.getNotas();
        // Crear el chart
        XYSeries series = new XYSeries(buscado.getNombre());
        for (int i = 0; i < notasEstudiante.size(); i++) {
            series.add(i + 1, notasEstudiante.get(i)); // Agregar cada nota en orden
        }
        // Agregar las series de datos
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);

        // Generar el gráfico
        JFreeChart chart = ChartFactory.createXYLineChart(buscado.getNombre(), "Nota #", "Calificación", dataset, PlotOrientation.VERTICAL, false, true, false);

        // Convertir las unidades de las X, para que vayan de 1 en 1
        XYPlot plot = (XYPlot) chart.getPlot(); // Obtener la grafica
        NumberAxis xAxis = (NumberAxis) plot.getDomainAxis(); // Obtener el eje X
        xAxis.setTickUnit(new NumberTickUnit(1)); // Fijar unidades a 1

        // Agregarlo al panel
        panelHistorico.setLayout(new BorderLayout());
        panelHistorico.removeAll();
        panelHistorico.add(new ChartPanel(chart), BorderLayout.CENTER);
        panelHistorico.revalidate();
        panelHistorico.repaint();
    }//GEN-LAST:event_btnHistoricoMouseClicked

    private void exportarBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportarBtnMouseClicked
        // Si no ha sido creada debe mostrarse un error
        if (tablaCreada == false) {
            // Mostrar un mensaje de error que le indique al usuario
            JOptionPane.showMessageDialog(new JFrame(), "Primero se tiene que crear la tabla de notas", "Error", JOptionPane.ERROR_MESSAGE);
            return; // salirse
        }
        if (promedios == false) {
            JOptionPane.showMessageDialog(new JFrame(), "Primero se tienen que calcular los promedios", "Error", JOptionPane.ERROR_MESSAGE);
            return; // salirse
        }

        // Crear el archivo
        Archivo archivo = new Archivo();
        archivo.setEstudiantes(this.estudiantes);

        // Obtener el nombre del archivo
        String narchivo = nombreArchivoField.getText();
        // Si el nombre del archivo está mal
        if (narchivo.length() < 1) {
            JOptionPane.showMessageDialog(new JFrame(), "Primero tienes que colocar un nombre de archivo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (archivo.generarCSV(narchivo) == true) {
            JOptionPane.showMessageDialog(new JFrame(), "Se ha creado el archivo", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Hubo un error al crear el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_exportarBtnMouseClicked

    private void cargarBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cargarBtnMouseClicked
        // Abrir un cuadro de búsqueda para que el usuario seleccione un archivo
        JFileChooser ventana = new JFileChooser();
        // Solo se pueden seleccionar archivos
        ventana.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // Mostrar la ventana
        int resultado = ventana.showOpenDialog(this);

        if (resultado == JFileChooser.CANCEL_OPTION) {
            JOptionPane.showMessageDialog(new JFrame(), "Se canceló la operación", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Abrir y leer el archivo
        Archivo archivo = new Archivo();
        File archivoLeido = ventana.getSelectedFile();
        // En caso de que haya algún error
        if (archivo.cargarCSV(archivoLeido) == false) {
            JOptionPane.showMessageDialog(new JFrame(), "No se pudo leer el archivo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener los nuevos estudiantes y calcular la materia
        this.estudiantes = archivo.getEstudiantes();
        this.materia = new Materia(this.estudiantes);
        // Obtener la cantidad de estudiantes
        this.nEstudiantes = this.estudiantes.size();
        // Verificar que sea correcta
        if (nEstudiantes < 1) {
            JOptionPane.showMessageDialog(new JFrame(), "La cantidad de estudiantes es errónea", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        this.nNotas = this.estudiantes.get(0).getNotas().size();
        if (nNotas < 1) {
            JOptionPane.showMessageDialog(new JFrame(), "La cantidad de notas es errónea", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Construir la tabla
        // Crear un arreglo con los nombres de las columnas
        ArrayList<String> columnas = new ArrayList<String>();
        columnas.add("Nombres"); // Colocar el campo nombre
        // Se crear columnas que se llamen "Nota 1", "Nota 2", etc.
        for (int i = 0; i < nNotas; i++) {
            Integer valor = i + 1;
            columnas.add("Nota " + valor.toString());
        }

        // Se crea una tabla vacía con el número de elementos especificados por el usuario
        DefaultTableModel modeloTabla = new DefaultTableModel(nEstudiantes, columnas.size());
        modeloTabla.setColumnIdentifiers(columnas.toArray()); // Colocar el nombre de las columnas

        // poblar la tabla
        for (int i = 0; i < nEstudiantes; i++) {
            for (int j = 0; j < nNotas + 1; j++) {
                // Colocar el nombre
                if (j == 0) {
                    modeloTabla.setValueAt(this.estudiantes.get(i).getNombre(), i, j);
                } // Colocar las notas
                else {
                    modeloTabla.setValueAt(this.estudiantes.get(i).getNotas().get(j - 1), i, j);
                }
            }
        }

        tablaNotas = new JTable(modeloTabla);

        // Se coloca dentro de la interfaz
        scrollTablaEstudiantes.getViewport().add(tablaNotas);
        // La tabla ya fue creada entonces cambiar la variable
        tablaCreada = true;
        
        // Calcular los promedios
        this.btnCalcularPromedioMouseClicked(evt);
    }//GEN-LAST:event_cargarBtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aproboLabel;
    private javax.swing.JButton btnCalcularPromedio;
    private javax.swing.JButton btnCrearTabla;
    private javax.swing.JButton btnHistorico;
    private javax.swing.JButton cargarBtn;
    private javax.swing.JButton exportarBtn;
    private javax.swing.JTextField historicoField;
    private javax.swing.JLabel labelEstudiantes;
    private javax.swing.JLabel labelHistorico;
    private javax.swing.JLabel labelMain;
    private javax.swing.JLabel labelNombreArchivo;
    private javax.swing.JLabel labelNotas;
    private javax.swing.JTextField nEstudiantesField;
    private javax.swing.JTextField nNotasEstudiante;
    private javax.swing.JTextField nombreArchivoField;
    private javax.swing.JPanel panelHistorico;
    private javax.swing.JPanel panelMortalidad;
    private javax.swing.JLabel reproboLabel;
    private javax.swing.JLabel resultadosLabel;
    private javax.swing.JLabel resultadosLabel1;
    private javax.swing.JScrollPane resultadosPane;
    private javax.swing.JTable resultadosTable;
    private javax.swing.JScrollPane scrollTablaEstudiantes;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JTable tablaNotas;
}
